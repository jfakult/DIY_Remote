{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/butlah/node/apps/remote/remote/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Button, PasswordPanel, SplashScreen } from './App';\nimport Cookies from 'js-cookie'; //import reportWebVitals from './reportWebVitals';\n\nconst wss = new WebSocket(\"wss://home.fakult.net/remote/update\");\nvar buttonData = {};\n\nwss.onopen = function (forceInit = false) {\n  if (forceInit || Cookies.get(\"token\")) {\n    console.log(\"Websocket opening\");\n    console.log(\"COokie is:\", Cookies.get(\"token\"));\n    wss.send(JSON.stringify({\n      \"token\": Cookies.get(\"token\")\n    }));\n  }\n};\n\nwss.onmessage = function (event) {\n  var msg = event.data;\n  var response = \"\";\n\n  try {\n    response = JSON.parse(msg);\n    console.log(\"Socket message received:\", JSON.stringify(response));\n\n    if (response.device_id && response.device_id in buttonData) {\n      buttonData[response.device_id] = response;\n      renderButtons();\n    }\n  } catch (e) {\n    console.log(\"Socket error received:\", msg);\n    return;\n  }\n};\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(\"h2\", {\n  children: \"Home Remote Control\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 17\n}, this), document.getElementById(\"title\"));\n\nif (!Cookies.get(\"token\")) {\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(PasswordPanel, {\n    maxPassLength: \"5\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 18\n  }, this), document.getElementById(\"passwordPanel\"));\n} else {\n  pollDevicesAndPopulate();\n\n  if (wss.readyState === wss.OPEN) {\n    wss.onopen(true);\n  }\n}\n\nvar expandedButtonIndex = -1;\n\nasync function pollDevicesAndPopulate(device) {\n  //console.log(\"Polling devices from index\")\n  var postOptions = {};\n\n  if (device !== undefined) {\n    postOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(device)\n    };\n  } else {\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(SplashScreen, {\n      visible: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }, this), document.getElementById(\"splash\"));\n  }\n\n  const response = await fetch(\"/remote/backend/poll\", postOptions);\n  const text = await response.text();\n  console.log(\"Poll response:\", text);\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(SplashScreen, {\n    visible: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 18\n  }, this), document.getElementById(\"splash\"));\n\n  if (text === \"Invalid cookie\") {\n    Cookies.remove(\"token\");\n    window.location.reload(false);\n    return;\n  } else if (text === \"Invalid user. Contact Jake\") {\n    // TODO toast\n    return;\n  } else if (text === \"No devices found\") {\n    // TODO toast\n    return;\n  }\n\n  if (response.status !== 200) {\n    console.log(\"Failed to reach backend server\");\n    return; //throw Error(text.message)\n  }\n\n  if (device !== undefined && device.device_id !== undefined) {\n    var deviceData = JSON.parse(text);\n    buttonData[deviceData.device_id] = deviceData;\n  } else {\n    var data = JSON.parse(text);\n\n    for (var i = 0; i < data.length; i++) {\n      device = data[i];\n      buttonData[device.device_id] = device;\n    }\n  } //console.log(\"Currnt button data\", buttonData)\n\n\n  renderButtons();\n}\n\nfunction renderButtons(expandedButton, dev) {\n  console.log(\"Rendering\");\n  if (expandedButton !== undefined) expandedButtonIndex = expandedButton;\n\n  if (dev !== undefined && dev.device_id !== undefined) {\n    //pollDevicesAndPopulate(dev)\n    return;\n  }\n\n  var buttons = [];\n  var i = 0;\n\n  for (var device_id in buttonData) {\n    var device = buttonData[device_id];\n    console.log(\"Expanding:\", i, expandedButton === i);\n    buttons.push( /*#__PURE__*/_jsxDEV(Button, {\n      index: i + 1,\n      expanded: expandedButtonIndex === i ? true : false,\n      device: device,\n      clickFunc: renderButtons,\n      websocket: wss\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 16\n    }, this));\n    i++;\n  }\n\n  ReactDOM.render(buttons, document.getElementById(\"buttonPanel\"));\n} // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();","map":{"version":3,"sources":["/home/butlah/node/apps/remote/remote/client/src/index.js"],"names":["React","ReactDOM","Button","PasswordPanel","SplashScreen","Cookies","wss","WebSocket","buttonData","onopen","forceInit","get","console","log","send","JSON","stringify","onmessage","event","msg","data","response","parse","device_id","renderButtons","e","render","document","getElementById","pollDevicesAndPopulate","readyState","OPEN","expandedButtonIndex","device","postOptions","undefined","method","headers","body","fetch","text","remove","window","location","reload","status","deviceData","i","length","expandedButton","dev","buttons","push"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,SAAQC,MAAR,EAAgBC,aAAhB,EAA+BC,YAA/B,QAAkD,OAAlD;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;;AAEA,MAAMC,GAAG,GAAG,IAAIC,SAAJ,CAAc,qCAAd,CAAZ;AACA,IAAIC,UAAU,GAAG,EAAjB;;AAEAF,GAAG,CAACG,MAAJ,GAAa,UAASC,SAAS,GAAG,KAArB,EACb;AACC,MAAIA,SAAS,IAAIL,OAAO,CAACM,GAAR,CAAY,OAAZ,CAAjB,EACA;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEAD,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA2BR,OAAO,CAACM,GAAR,CAAY,OAAZ,CAA3B;AACAL,IAAAA,GAAG,CAACQ,IAAJ,CAAUC,IAAI,CAACC,SAAL,CAAe;AAAC,eAASX,OAAO,CAACM,GAAR,CAAY,OAAZ;AAAV,KAAf,CAAV;AACA;AACD,CATD;;AAWAL,GAAG,CAACW,SAAJ,GAAgB,UAASC,KAAT,EAAgB;AAC/B,MAAIC,GAAG,GAAGD,KAAK,CAACE,IAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MACA;AACCA,IAAAA,QAAQ,GAAGN,IAAI,CAACO,KAAL,CAAWH,GAAX,CAAX;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCE,IAAI,CAACC,SAAL,CAAeK,QAAf,CAAxC;;AAEA,QAAIA,QAAQ,CAACE,SAAT,IAAsBF,QAAQ,CAACE,SAAT,IAAsBf,UAAhD,EACA;AACCA,MAAAA,UAAU,CAACa,QAAQ,CAACE,SAAV,CAAV,GAAiCF,QAAjC;AACAG,MAAAA,aAAa;AACb;AACD,GAVD,CAWA,OAAMC,CAAN,EACA;AACCb,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCM,GAAtC;AACA;AACA;AACD,CAnBD;;AAqBAlB,QAAQ,CAACyB,MAAT,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA8CC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAA9C;;AAEA,IAAI,CAACvB,OAAO,CAACM,GAAR,CAAY,OAAZ,CAAL,EACA;AACCV,EAAAA,QAAQ,CAACyB,MAAT,eAAgB,QAAC,aAAD;AAAe,IAAA,aAAa,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAqDC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAArD;AACA,CAHD,MAKA;AACCC,EAAAA,sBAAsB;;AAEtB,MAAIvB,GAAG,CAACwB,UAAJ,KAAmBxB,GAAG,CAACyB,IAA3B,EACA;AACCzB,IAAAA,GAAG,CAACG,MAAJ,CAAW,IAAX;AACA;AACD;;AAED,IAAIuB,mBAAmB,GAAG,CAAC,CAA3B;;AACA,eAAeH,sBAAf,CAAsCI,MAAtC,EACA;AACC;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAID,MAAM,KAAKE,SAAf,EACA;AACCD,IAAAA,WAAW,GAAG;AACbE,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFI;AAGbC,MAAAA,IAAI,EAAEvB,IAAI,CAACC,SAAL,CAAeiB,MAAf;AAHO,KAAd;AAKA,GAPD,MASA;AACChC,IAAAA,QAAQ,CAACyB,MAAT,eAAgB,QAAC,YAAD;AAAc,MAAA,OAAO,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAhB,EAAiDC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAjD;AACA;;AAED,QAAMP,QAAQ,GAAG,MAAMkB,KAAK,CAAC,sBAAD,EAAyBL,WAAzB,CAA5B;AACA,QAAMM,IAAI,GAAG,MAAMnB,QAAQ,CAACmB,IAAT,EAAnB;AACA5B,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B2B,IAA9B;AAEAvC,EAAAA,QAAQ,CAACyB,MAAT,eAAgB,QAAC,YAAD;AAAc,IAAA,OAAO,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAkDC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAlD;;AAEA,MAAIY,IAAI,KAAK,gBAAb,EACA;AACCnC,IAAAA,OAAO,CAACoC,MAAR,CAAe,OAAf;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACA;AACA,GALD,MAMK,IAAIJ,IAAI,KAAK,4BAAb,EACL;AACC;AACA;AACA,GAJI,MAKA,IAAIA,IAAI,KAAK,kBAAb,EACL;AACC;AACA;AACA;;AAED,MAAInB,QAAQ,CAACwB,MAAT,KAAoB,GAAxB,EACA;AACCjC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA,WAFD,CAGC;AACA;;AAED,MAAIoB,MAAM,KAAKE,SAAX,IAAwBF,MAAM,CAACV,SAAP,KAAqBY,SAAjD,EACA;AACC,QAAIW,UAAU,GAAG/B,IAAI,CAACO,KAAL,CAAWkB,IAAX,CAAjB;AACAhC,IAAAA,UAAU,CAACsC,UAAU,CAACvB,SAAZ,CAAV,GAAmCuB,UAAnC;AACA,GAJD,MAMA;AACC,QAAI1B,IAAI,GAAGL,IAAI,CAACO,KAAL,CAAWkB,IAAX,CAAX;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,IAAI,CAAC4B,MAAzB,EAAiCD,CAAC,EAAlC,EACA;AACCd,MAAAA,MAAM,GAAGb,IAAI,CAAC2B,CAAD,CAAb;AACAvC,MAAAA,UAAU,CAACyB,MAAM,CAACV,SAAR,CAAV,GAA+BU,MAA/B;AACA;AACD,GA3DF,CA6DC;;;AAEAT,EAAAA,aAAa;AACb;;AAED,SAASA,aAAT,CAAuByB,cAAvB,EAAuCC,GAAvC,EACA;AACCtC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,MAAIoC,cAAc,KAAKd,SAAvB,EACCH,mBAAmB,GAAGiB,cAAtB;;AAED,MAAIC,GAAG,KAAKf,SAAR,IAAqBe,GAAG,CAAC3B,SAAJ,KAAkBY,SAA3C,EACA;AACC;AACA;AACA;;AAED,MAAIgB,OAAO,GAAG,EAAd;AACA,MAAIJ,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIxB,SAAT,IAAsBf,UAAtB,EACA;AACC,QAAIyB,MAAM,GAAGzB,UAAU,CAACe,SAAD,CAAvB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BkC,CAA1B,EAA6BE,cAAc,KAAKF,CAAhD;AACAI,IAAAA,OAAO,CAACC,IAAR,eAAa,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEL,CAAC,GAAC,CAAjB;AAAoB,MAAA,QAAQ,EAAEf,mBAAmB,KAAKe,CAAxB,GAA4B,IAA5B,GAAmC,KAAjE;AAAwE,MAAA,MAAM,EAAEd,MAAhF;AAAwF,MAAA,SAAS,EAAET,aAAnG;AAAkH,MAAA,SAAS,EAAElB;AAA7H;AAAA;AAAA;AAAA;AAAA,YAAb;AACAyC,IAAAA,CAAC;AACD;;AAED9C,EAAAA,QAAQ,CAACyB,MAAT,CAAgByB,OAAhB,EAAyBxB,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAzB;AACA,C,CAGD;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Button, PasswordPanel, SplashScreen} from './App';\nimport Cookies from 'js-cookie';\n//import reportWebVitals from './reportWebVitals';\n\nconst wss = new WebSocket(\"wss://home.fakult.net/remote/update\")\nvar buttonData = {}\n\nwss.onopen = function(forceInit = false)\n{\n\tif (forceInit || Cookies.get(\"token\"))\n\t{\n\t\tconsole.log(\"Websocket opening\")\n\n\t\tconsole.log(\"COokie is:\", (Cookies.get(\"token\")))\n\t\twss.send( JSON.stringify({\"token\": Cookies.get(\"token\")}) )\n\t}\n}\n\nwss.onmessage = function(event) {\n\tvar msg = event.data\n\tvar response = \"\"\n\ttry\n\t{\n\t\tresponse = JSON.parse(msg)\n\t\tconsole.log(\"Socket message received:\", JSON.stringify(response))\n\n\t\tif (response.device_id && response.device_id in buttonData)\n\t\t{\n\t\t\tbuttonData[response.device_id] = response\n\t\t\trenderButtons();\n\t\t}\n\t}\n\tcatch(e)\n\t{\n\t\tconsole.log(\"Socket error received:\", msg)\n\t\treturn\n\t}\n};\n\nReactDOM.render(<h2>Home Remote Control</h2>, document.getElementById(\"title\"))\n\nif (!Cookies.get(\"token\"))\n{\n\tReactDOM.render(<PasswordPanel maxPassLength=\"5\" />, document.getElementById(\"passwordPanel\"))\n}\nelse\n{\n\tpollDevicesAndPopulate()\n\n\tif (wss.readyState === wss.OPEN)\n\t{\n\t\twss.onopen(true)\n\t}\n}\n\nvar expandedButtonIndex = -1;\nasync function pollDevicesAndPopulate(device)\n{\n\t//console.log(\"Polling devices from index\")\n\tvar postOptions = {}\n\tif (device !== undefined)\n\t{\n\t\tpostOptions = {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\tbody: JSON.stringify(device)\n\t\t}\n\t}\n\telse\n\t{\n\t\tReactDOM.render(<SplashScreen visible={true} />, document.getElementById(\"splash\"))\n\t}\n\t\n\tconst response = await fetch(\"/remote/backend/poll\", postOptions)\n\tconst text = await response.text()\n\tconsole.log(\"Poll response:\", text)\n\t\t\n\tReactDOM.render(<SplashScreen visible={false} />, document.getElementById(\"splash\"))\n\n\tif (text === \"Invalid cookie\")\n\t{\n\t\tCookies.remove(\"token\")\n\t\twindow.location.reload(false)\n\t\treturn\n\t}\n\telse if (text === \"Invalid user. Contact Jake\")\n\t{\n\t\t// TODO toast\n\t\treturn\n\t}\n\telse if (text === \"No devices found\")\n\t{\n\t\t// TODO toast\n\t\treturn\n\t}\n\n\tif (response.status !== 200)\n\t{\n\t\tconsole.log(\"Failed to reach backend server\")\n\t\treturn\n\t\t//throw Error(text.message)\n\t}\n\n\tif (device !== undefined && device.device_id !== undefined)\n\t{\n\t\tvar deviceData = JSON.parse(text)\n\t\tbuttonData[deviceData.device_id] = deviceData\n\t}\n\telse\n\t{\n\t\tvar data = JSON.parse(text)\n\t\tfor (var i = 0; i < data.length; i++)\n\t\t{\n\t\t\tdevice = data[i]\n\t\t\tbuttonData[device.device_id] = device\n\t\t}\n\t}\n\n\t//console.log(\"Currnt button data\", buttonData)\n\t\n\trenderButtons()\n}\n\nfunction renderButtons(expandedButton, dev)\n{\n\tconsole.log(\"Rendering\")\n\tif (expandedButton !== undefined)\n\t\texpandedButtonIndex = expandedButton\n\n\tif (dev !== undefined && dev.device_id !== undefined)\n\t{\n\t\t//pollDevicesAndPopulate(dev)\n\t\treturn\n\t}\n\n\tvar buttons = []\n\tvar i = 0\n\tfor (var device_id in buttonData)\n\t{\n\t\tvar device = buttonData[device_id]\n\t\tconsole.log(\"Expanding:\", i, expandedButton === i)\n\t\tbuttons.push(<Button index={i+1} expanded={expandedButtonIndex === i ? true : false} device={device} clickFunc={renderButtons} websocket={wss} />)\n\t\ti++\n\t}\n\n\tReactDOM.render(buttons, document.getElementById(\"buttonPanel\"))\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"]},"metadata":{},"sourceType":"module"}